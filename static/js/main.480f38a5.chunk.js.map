{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/CommentsInfo.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","App.tsx","api/clientRequest.ts","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","setErrorPostComments","className","map","id","title","type","classNames","onClick","Loader","NewCommentForm","onAddComment","isPostNewComment","safeBodyComments","useState","nameInput","setNameInput","emailInput","setEmailInput","bodyTextArea","setBodyTextArea","isValidNameInput","setIsValidNameInput","isValidEmailInput","setIsValidEmailInput","isValidTextArea","setIsValidTextAreaInput","hendleInput","e","currentTarget","value","name","Error","useEffect","htmlFor","placeholder","onChange","preventDefault","check","checkValidField","CommentInfo","comment","onDelete","href","email","body","PostDetails","post","comments","isLoadComments","isErrorLoadComments","errorDelete","isErrorDelete","isErrorPostComments","deletePost","setIsErrorDelete","isActiveForm","setIsActiveForm","setTimeout","length","UserSelector","users","selectedUser","setSelectedUser","isActiveUserList","setIsActiveUserList","isActiveUser","state","role","idSelectedUser","find","BASE_URL","wait","delay","Promise","resolve","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","App","setUsers","isLoad","setIsLoad","setPosts","isErrorLoadPosts","setIsErrorLoadPosts","setComments","setIsLoadComments","setIsErrorLoadComments","setIsPostNewComment","setSafeBodyComments","loadPostsYet","loadPostsError","showNoSelectedUser","getDataUsers","a","usersFromServer","getDataPosts","idUser","postsFromServer","getDataComments","idPost","commentsFromServer","findSelectedUserPost","useCallback","user","findCommentsSelectedPost","idSelectedPost","currentPost","postId","deleteCommentFromList","commentId","cloneComments","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.480f38a5.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  setSelectedPost: (id: number) => void,\n  setErrorPostComments: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setErrorPostComments,\n}) => {\n  const hendlerActivePost = (idSelectedPost: number): void => {\n    setSelectedPost(idSelectedPost);\n    setErrorPostComments(false);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(({ id, title }) => (\n            <tr data-cy=\"Post\" key={id}>\n              <td data-cy=\"PostId\">{id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button is-link',\n                    { 'is-light': selectedPost?.id !== id },\n                  )}\n                  onClick={() => hendlerActivePost(id)}\n                >\n                  {selectedPost?.id !== id ? 'Open' : 'Close'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  onAddComment: (name: string, email: string, body: string) => void,\n  isPostNewComment: boolean,\n  safeBodyComments: boolean,\n};\n\nexport const NewCommentForm: FC<Props> = ({\n  onAddComment,\n  isPostNewComment,\n  safeBodyComments,\n}) => {\n  const [nameInput, setNameInput] = useState('');\n  const [emailInput, setEmailInput] = useState('');\n  const [bodyTextArea, setBodyTextArea] = useState('');\n\n  const [isValidNameInput, setIsValidNameInput] = useState(true);\n  const [isValidEmailInput, setIsValidEmailInput] = useState(true);\n  const [isValidTextArea, setIsValidTextAreaInput] = useState(true);\n\n  const hendleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, name } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setNameInput(value);\n        setIsValidNameInput(true);\n        break;\n\n      case 'email':\n        setEmailInput(value);\n        setIsValidEmailInput(true);\n        break;\n\n      default:\n        throw new Error('no name in input');\n    }\n  };\n\n  const hendletInputTextArea = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { value } = e.currentTarget;\n\n    setBodyTextArea(value);\n    setIsValidTextAreaInput(true);\n  };\n\n  const checkValidField = () => {\n    let check = true;\n\n    if (!nameInput) {\n      setIsValidNameInput(false);\n      check = false;\n    }\n\n    if (!emailInput) {\n      setIsValidEmailInput(false);\n      check = false;\n    }\n\n    if (!bodyTextArea) {\n      setIsValidTextAreaInput(false);\n      check = false;\n    }\n\n    return check;\n  };\n\n  const clearForm = () => {\n    setNameInput('');\n    setEmailInput('');\n    setBodyTextArea('');\n    setIsValidNameInput(true);\n    setIsValidEmailInput(true);\n    setIsValidTextAreaInput(true);\n  };\n\n  const hendlerSubmitButton = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    e.preventDefault();\n\n    if (!checkValidField()) {\n      return;\n    }\n\n    onAddComment(nameInput, emailInput, bodyTextArea);\n  };\n\n  useEffect(() => {\n    if (safeBodyComments) {\n      setBodyTextArea('');\n    }\n  }, [safeBodyComments]);\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': !isValidNameInput },\n            )}\n            value={nameInput}\n            onChange={hendleInput}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!isValidNameInput && (\n            <>\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Name is required\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': !isValidEmailInput },\n            )}\n            value={emailInput}\n            onChange={hendleInput}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!isValidEmailInput && (\n            <>\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Email is required\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': !isValidTextArea },\n            )}\n            value={bodyTextArea}\n            onChange={hendletInputTextArea}\n          />\n        </div>\n\n        {!isValidTextArea && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isPostNewComment },\n            )}\n            onClick={hendlerSubmitButton}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { FC } from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment,\n  onDelete: (id: number) => void,\n};\n\nexport const CommentInfo: FC<Props> = ({\n  comment,\n  onDelete,\n}) => {\n  const hendlerDelete = () => {\n    onDelete(comment.id);\n  };\n\n  return (\n    <>\n      <div className=\"message-header\">\n        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={hendlerDelete}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentInfo } from './CommentsInfo';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post | null,\n  comments: Comment[],\n  isLoadComments: boolean,\n  isErrorLoadComments: boolean,\n  isPostNewComment: boolean,\n  isErrorPostComments: boolean,\n  safeBodyComments: boolean,\n  isErrorDelete: boolean,\n  setIsErrorDelete: React.Dispatch<React.SetStateAction<boolean>>,\n  setErrorPostComments: React.Dispatch<React.SetStateAction<boolean>>,\n  onAddComment: (name: string, email: string, body: string) => void,\n  deletePost: (id: number) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  comments,\n  isLoadComments,\n  isErrorLoadComments,\n  isErrorDelete: errorDelete,\n  isPostNewComment,\n  isErrorPostComments,\n  safeBodyComments,\n  setErrorPostComments,\n  onAddComment,\n  deletePost,\n  setIsErrorDelete,\n}) => {\n  const [isActiveForm, setIsActiveForm] = useState<boolean>(false);\n  const hendlerAddNewComment = (): void => {\n    setIsActiveForm(true);\n  };\n\n  useEffect(() => {\n    if (isErrorPostComments) {\n      setTimeout(() => setErrorPostComments(false), 1500);\n    }\n\n    if (errorDelete) {\n      setTimeout(() => setIsErrorDelete(false), 1500);\n    }\n  }, [isErrorPostComments, errorDelete]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.title}\n          </p>\n        </div>\n        {isLoadComments || <Loader />}\n\n        <div className=\"block\">\n          {isErrorLoadComments && isLoadComments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {isLoadComments && !!comments.length && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <CommentInfo\n                    comment={comment}\n                    onDelete={deletePost}\n                  />\n                </article>\n              ))}\n            </>\n          )}\n\n          {isLoadComments && !comments.length && !isErrorLoadComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {errorDelete && (\n            <div className=\"notification is-danger\">\n              can`t delete, try again\n            </div>\n          )}\n\n          {isLoadComments && !isErrorLoadComments && !isActiveForm && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={hendlerAddNewComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isActiveForm && (\n          <NewCommentForm\n            onAddComment={onAddComment}\n            isPostNewComment={isPostNewComment}\n            safeBodyComments={safeBodyComments}\n          />\n        )}\n\n        {isErrorPostComments && (\n          <div className=\"notification is-danger\">Can`t post, try again</div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [isActiveUserList, setIsActiveUserList] = useState<boolean>(false);\n\n  const hendlerLinkUser = (idSelectedUser: number): void => {\n    setSelectedUser(users.find(({ id }) => id === idSelectedUser) || null);\n    setIsActiveUserList(false);\n  };\n\n  const isActiveUser = (id: number): boolean => {\n    if (selectedUser?.id === id) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const hendlerActiveList = (): void => {\n    setIsActiveUserList(state => !state);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActiveUserList },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={hendlerActiveList}\n        >\n          <span>Choose a user</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(({ id, name }) => (\n            <a\n              key={id}\n              href={`#user-${id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': isActiveUser(id) },\n              )}\n              onClick={() => hendlerLinkUser(id)}\n            >\n              {name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  /* eslint-disable-next-line */\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  /* eslint-disable-next-line */\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  /* eslint-disable-next-line */\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport {\n  getUsers,\n  getPosts,\n  getComments,\n  postComments,\n  deletePost,\n} from './api/clientRequest';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoad, setIsLoad] = useState<boolean>(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isErrorLoadPosts, setIsErrorLoadPosts] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoadComments, setIsLoadComments] = useState<boolean>(false);\n  const [isErrorLoadComments, setIsErrorLoadComments] = useState(false);\n  const [isPostNewComment, setIsPostNewComment] = useState(false);\n  const [isErrorPostComments, setErrorPostComments] = useState(false);\n  const [safeBodyComments, setSafeBodyComments] = useState(false);\n  const [isErrorDelete, setIsErrorDelete] = useState(false);\n  const loadPostsYet = !posts.length\n    && selectedUser\n    && !isLoad\n    && !isErrorLoadPosts;\n  const loadPostsError = isErrorLoadPosts && !isLoad;\n  const showNoSelectedUser = !isLoad && !isErrorLoadPosts && !selectedUser;\n\n  const getDataUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      throw new Error();\n    }\n  };\n\n  const getDataPosts = async (idUser: number) => {\n    try {\n      setIsLoad(true);\n      const postsFromServer = await getPosts(idUser);\n\n      setPosts(postsFromServer);\n      setIsErrorLoadPosts(false);\n    } catch {\n      setIsErrorLoadPosts(true);\n    } finally {\n      setIsLoad(false);\n    }\n  };\n\n  const getDataComments = async (idPost: number) => {\n    try {\n      setIsLoadComments(false);\n      const commentsFromServer = await getComments(idPost);\n\n      setComments(commentsFromServer);\n      setIsErrorLoadComments(false);\n    } catch {\n      setIsErrorLoadComments(true);\n    } finally {\n      setIsLoadComments(true);\n    }\n  };\n\n  useEffect(() => {\n    getDataUsers();\n  }, []);\n\n  const findSelectedUserPost = useCallback((user): void => {\n    setSelectedUser(user);\n\n    getDataPosts(user?.id);\n  }, []);\n\n  const findCommentsSelectedPost = useCallback((\n    idSelectedPost: number,\n  ): void => {\n    if (selectedPost?.id === idSelectedPost) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    const currentPost = posts.find(({ id }) => id === idSelectedPost);\n\n    setSelectedPost(currentPost || null);\n\n    if (currentPost) {\n      getDataComments(currentPost.id);\n    }\n  }, [posts, selectedPost]);\n\n  const onAddComment = async (name: string, email: string, body: string) => {\n    setErrorPostComments(false);\n    setIsPostNewComment(true);\n    setSafeBodyComments(false);\n\n    try {\n      if (!selectedPost) {\n        throw new Error('no post');\n      }\n\n      const request = await postComments({\n        postId: selectedPost.id,\n        name,\n        email,\n        body,\n      });\n\n      setComments([...comments, request]);\n      setSafeBodyComments(true);\n    } catch (err) {\n      setErrorPostComments(true);\n    } finally {\n      setIsPostNewComment(false);\n    }\n  };\n\n  const deleteCommentFromList = async (commentId: number) => {\n    const cloneComments = [...comments];\n\n    try {\n      setIsErrorDelete(false);\n      setComments(comments.filter(({ id }) => id !== commentId));\n\n      const remove = await deletePost(commentId);\n\n      if (remove === 1) {\n        return;\n      }\n\n      setComments(cloneComments);\n      throw new Error('error');\n    } catch {\n      setComments(cloneComments);\n      setIsErrorDelete(true);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setSelectedUser={findSelectedUserPost}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {isLoad && <Loader />}\n\n                {showNoSelectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {!!posts.length && !isLoad && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={findCommentsSelectedPost}\n                    setErrorPostComments={setErrorPostComments}\n                  />\n                )}\n\n                {loadPostsYet && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {loadPostsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                  comments={comments}\n                  isLoadComments={isLoadComments}\n                  isErrorLoadComments={isErrorLoadComments}\n                  onAddComment={onAddComment}\n                  isPostNewComment={isPostNewComment}\n                  isErrorPostComments={isErrorPostComments}\n                  setErrorPostComments={setErrorPostComments}\n                  safeBodyComments={safeBodyComments}\n                  deletePost={deleteCommentFromList}\n                  isErrorDelete={isErrorDelete}\n                  setIsErrorDelete={setIsErrorDelete}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport const getUsers = () => client.get<User[]>('/users');\nexport const getPosts = (id: number) => client.get<Post[]>(`/posts?userId=${id}`);\nexport const getComments = (id: number) => client.get<Comment[]>(`/comments?postId=${id}`);\n/* eslint-disable-next-line */\nexport const postComments = (data: any) => client.post<Comment>(\n  '/comments',\n  data,\n);\nexport const deletePost = (idComment: number) => client.delete(`/comments/${idComment}`);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}